---
/**
 * ProgressBar component for SSE streaming events
 *
 * This is a client-side component that displays progress updates
 * during search execution. It's designed to be updated via JavaScript.
 */
---

<div id="progress-container" class="mb-6 hidden">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Searching for activities...</h3>

    <!-- Progress messages -->
    <div id="progress-messages" class="space-y-2 max-h-64 overflow-y-auto">
      <!-- Messages will be added dynamically via JavaScript -->
    </div>

    <!-- Animated progress bar -->
    <div class="mt-4">
      <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
        <div
          id="progress-bar"
          class="h-2 bg-indigo-600 rounded-full transition-all duration-300 animate-pulse"
          style="width: 0%"
        >
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Helper functions available globally for results page
  declare global {
    interface Window {
      showProgress: () => void;
      hideProgress: () => void;
      addProgressMessage: (message: string, type?: 'info' | 'success' | 'error') => void;
      updateProgressBar: (percent: number) => void;
    }
  }

  const progressContainer = document.getElementById('progress-container');
  const progressMessages = document.getElementById('progress-messages');
  const progressBar = document.getElementById('progress-bar');

  window.showProgress = () => {
    progressContainer?.classList.remove('hidden');
  };

  window.hideProgress = () => {
    progressContainer?.classList.add('hidden');
  };

  window.addProgressMessage = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const messageEl = document.createElement('div');
    messageEl.className = 'flex items-start space-x-2 text-sm';

    const icon = document.createElement('span');
    icon.className = 'flex-shrink-0 mt-0.5';

    if (type === 'success') {
      icon.innerHTML = `<svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
      </svg>`;
    } else if (type === 'error') {
      icon.innerHTML = `<svg class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
      </svg>`;
    } else {
      icon.innerHTML = `<svg class="h-5 w-5 text-blue-500 animate-spin" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>`;
    }

    const text = document.createElement('span');
    text.className = 'text-gray-700';
    text.textContent = message;

    messageEl.appendChild(icon);
    messageEl.appendChild(text);

    progressMessages?.appendChild(messageEl);

    // Auto-scroll to bottom
    progressMessages?.scrollTo({
      top: progressMessages.scrollHeight,
      behavior: 'smooth'
    });
  };

  window.updateProgressBar = (percent: number) => {
    if (progressBar) {
      progressBar.style.width = `${Math.min(100, Math.max(0, percent))}%`;
    }
  };
</script>
